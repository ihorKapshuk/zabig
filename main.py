from decouple import config
import json
from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

SCORE = range(1)
TOKEN = config("TOKEN")
records_file = "run_records.json"


def get_keyboard1():
    reply_keyboard = [
        ["–ó–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å"],
        ["–†–µ–∑—É–ª—å—Ç–∞—Ç"],
        ["–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—è"],
        ["–ü—Ä–æ –±–æ—Ç–∞"]
    ]
    return ReplyKeyboardMarkup(reply_keyboard)


def get_keyboard2():
    reply_keyboard = [
        ["–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"]
    ]
    return ReplyKeyboardMarkup(reply_keyboard)


def merge_sort(records):
    if len(records) <= 1:
        return records

    mid = len(records) // 2
    left_half = merge_sort(records[:mid])
    right_half = merge_sort(records[mid:])

    return merge(left_half, right_half)


def merge(left, right):
    result = []
    i = j = 0

    while i < len(left) and j < len(right):
        if left[i]["month_score"] >= right[j]["month_score"]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    result.extend(left[i:])
    result.extend(right[j:])
    return result


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /start is issued."""
    await update.message.reply_html(
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ–π –±–æ—Ç –∑–∞–ø–∏—Å—É—î –≤—ñ–¥—Å—Ç–∞–Ω—å —è–∫—É —Ç–∏ –ø—Ä–æ–±—ñ–≥!\n–©–æ–± –¥–æ–¥–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å —è–∫—É –≤–∏ –ø—Ä–æ–±—ñ–≥–ª–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å'\n–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ –±–æ—Ç–∞'\n–ü–æ–±—ñ–≥–ª–∏?üòé",
        reply_markup=get_keyboard1()
    )


async def my_score_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Shows the runner score when the command /my_score is issued."""
    with open(records_file, "r") as read_file:
        records = json.load(read_file)
        user = update.effective_user
        runner_id = update.message.from_user.id
        if records == []:
            await update.message.reply_html(
                "–ù–µ –º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –ø—Ä–æ –±—ñ–≥—É–Ω—ñ–≤!üòî\n–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ –±–æ—Ç–∞'",
                reply_markup=get_keyboard1()
            )
        else:
            for record in records:
                if record["runner_id"] == runner_id:
                    this_user_week_score = record["week_score"]
                    this_user_month_score = record["month_score"]
                    answer = rf"–ü—Ä–∏–≤—ñ—Ç {user.mention_html()}!" + "\n–¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ —Ç–∏–∂–¥–µ–Ω—å : " + str(this_user_week_score) + " –∫–º!\n–¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ –º—ñ—Å—è—Ü—å : " + rf"{this_user_month_score} –∫–º!üí™"+ "\n–ù–∞—à –Ü–Ω—Å—Ç–∞–≥—Ä–∞–º: https://www.instagram.com/southrunners2025?igsh=MW1xcGJ1eGdkbThyag==\n–Ü–Ω—Å—Ç–∞–≥—Ä–∞–º —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞: https://www.instagram.com/kalika_perehoji/"
                    await update.message.reply_photo(
                        photo="image.jpg",
                        caption=answer,
                        parse_mode="HTML",
                        reply_markup=get_keyboard1()
                    )
                    break
            else:
                answer = rf"–ü—Ä–∏–≤—ñ—Ç {user.mention_html()}!" + "\n–ù–µ –º–∞—é –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ —Ç–µ–±–µ!üòî\n–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ –±–æ—Ç–∞'"
                await update.message.reply_html(
                    answer,
                    reply_markup=get_keyboard1()
                )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Shows the help message when the command /help is issued."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ–π –±–æ—Ç –∑–∞–ø–∏—Å—É—î –≤—ñ–¥—Å—Ç–∞–Ω—å —è–∫—É —Ç–∏ –ø—Ä–æ–±—ñ–≥!\n–©–æ–± –¥–æ–¥–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å —è–∫—É –≤–∏ –ø—Ä–æ–±—ñ–≥–ª–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å'\n–©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–†–µ–∑—É–ª—å—Ç–∞—Ç'\n–©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—É —Ç–∞–±–ª–∏—Ü—é –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—è'\n–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ –±–æ—Ç–∞'",
        reply_markup=get_keyboard1()
    )


async def runners_score_table(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    with open(records_file, "r") as read_file:
        records = json.load(read_file)
        sorted_records = merge_sort(records)
    result = "–†–ï–ô–¢–ò–ù–ì–û–í–ê –¢–ê–ë–õ–ò–¶–Ø\n"
    for i, record in enumerate(sorted_records):
        if i == 0:
            result += str(i + 1) + " " + record["runner_name"] + " " + str(record["month_score"]) + " –∫–º " + "ü•á\n"
        elif i == 1:
            result += str(i + 1) + " " + record["runner_name"] + " " + str(record["month_score"]) + " –∫–º " + "ü•à\n"
        elif i == 2:
            result += str(i + 1) + " " + record["runner_name"] + " " + str(record["month_score"]) + " –∫–º " + "ü•â\n"
        else:
            result += str(i + 1) + " " + record["runner_name"] + " " + str(record["month_score"]) + " –∫–º\n"
    if result == "–†–ï–ô–¢–ò–ù–ì–û–í–ê –¢–ê–ë–õ–ò–¶–Ø\n":
        await update.message.reply_text(
            "–¢–∞–±–ª–∏—Ü—è —â–µ –ø—É—Å—Ç–∞!",
            reply_markup=get_keyboard1()
        )
    else:
        await update.message.reply_text(
            result,
            reply_markup=get_keyboard1()
        )


async def record_distance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–©–æ–± –∑–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å —Ç—Ä–µ–±–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∏–ø—É:\n+ 10.0\n(–∑–∞–º—ñ—Å—Ç—å + –º–æ–∂–Ω–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ —Ç–∞–∫–æ–∂ run, –±—ñ–≥, –ü—Ä–æ–±—ñ–≥, –±–µ–≥)\n(10.0 - –≤—ñ–¥—Å—Ç–∞–Ω—å —É –∫–º, –º–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç–∏ —ñ 10 –±–µ–∑ –∫—Ä–∞–ø–∫–∏)\n–Ø–∫—â–æ –Ω–µ —Ö–æ—á–µ—Ç–µ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏'",
        reply_markup=get_keyboard2()
    )
    return SCORE


async def save_distance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Records runners score."""
    user_input = update.message.text
    current_month = update.message.date.month
    current_day = update.message.date.day
    if "–ü—Ä–æ–±—ñ–≥" in user_input or "–±—ñ–≥" in user_input or "run" in user_input or "+" in user_input or "–±–µ–≥" in user_input:
        user_input = user_input.replace("–ü—Ä–æ–±—ñ–≥", "")
        user_input = user_input.replace("–±—ñ–≥", "")
        user_input = user_input.replace("run", "")
        user_input = user_input.replace("+", "")
        user_input = user_input.replace("–±–µ–≥", "")
        user_input = user_input.replace(" ", "")
        if user_input[0] == "0" and not user_input[1] == ".":
            await update.message.reply_text(
                "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ!\n–©–æ–± –∑–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å —Ç—Ä–µ–±–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∏–ø—É:\n+ 10.0\n(–∑–∞–º—ñ—Å—Ç—å + –º–æ–∂–Ω–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ —Ç–∞–∫–æ–∂ run, –±—ñ–≥, –ü—Ä–æ–±—ñ–≥, –±–µ–≥)\n(10.0 - –≤—ñ–¥—Å—Ç–∞–Ω—å —É –∫–º, –º–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç–∏ —ñ 10 –±–µ–∑ –∫—Ä–∞–ø–∫–∏)",
                reply_markup=get_keyboard1()
            )
            return ConversationHandler.END
        else:
            try:
                user_input = float(user_input)
            except:
                await update.message.reply_text(
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ!\n–©–æ–± –∑–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å —Ç—Ä–µ–±–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∏–ø—É:\n+ 10.0\n(–∑–∞–º—ñ—Å—Ç—å + –º–æ–∂–Ω–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ —Ç–∞–∫–æ–∂ run, –±—ñ–≥, –ü—Ä–æ–±—ñ–≥, –±–µ–≥)\n(10.0 - –≤—ñ–¥—Å—Ç–∞–Ω—å —É –∫–º, –º–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç–∏ —ñ 10 –±–µ–∑ –∫—Ä–∞–ø–∫–∏)",
                    reply_markup=get_keyboard1()
                )
                return ConversationHandler.END
            else:
                with open(records_file, "r") as read_file:
                    records = json.load(read_file)
                    runner_name = update.message.from_user.full_name
                    runner_id = update.message.from_user.id
                    runner_score = user_input
                    if records == []:
                        new_record = {
                            "runner_name" : runner_name,
                            "runner_id" : runner_id,
                            "week_score" : runner_score,
                            "month_score" : runner_score,
                            "week_day" : current_day,
                            "current_month" : current_month
                        }
                        records.append(new_record)
                        this_user_week_score = new_record["week_score"]
                        this_user_month_score = new_record["month_score"]
                    else:
                        for record in records:
                            if record["runner_id"] == runner_id:
                                if record["current_month"] != current_month:
                                    record["week_score"] = 0.0
                                    record["month_score"] = 0.0
                                    record["week_day"] = current_day
                                    record["current_month"] = current_month
                                    this_user_week_score = record["week_score"]
                                    this_user_month_score = record["month_score"]
                                    break
                                else:
                                    if current_day - record["week_day"] == 7:
                                        record["week_score"] = runner_score
                                        record["month_score"] += runner_score
                                        record["week_day"] = current_day
                                        this_user_week_score = record["week_score"]
                                        this_user_month_score = record["month_score"]
                                        break
                                    else:
                                        record["week_score"] += runner_score
                                        record["month_score"] += runner_score
                                        this_user_week_score = record["week_score"]
                                        this_user_month_score = record["month_score"]
                                        break
                        else:
                            new_record = {
                                "runner_name" : runner_name,
                                "runner_id" : runner_id,
                                "week_score" : runner_score,
                                "month_score" : runner_score,
                                "week_day" : current_day,
                                "current_month" : current_month
                            }
                            records.append(new_record)
                            this_user_week_score = new_record["week_score"]
                            this_user_month_score = new_record["month_score"]
                with open(records_file, "w") as write_file:
                    json.dump(records, write_file)
                await update.message.reply_photo(
                    photo="image.jpg",
                    caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω–æ!üòå\n–¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç : " + str(runner_score) + " –∫–º!\n–¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ —Ç–∏–∂–¥–µ–Ω—å : " + str(this_user_week_score) + " –∫–º!\n–¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ –º—ñ—Å—è—Ü—å : " + rf"{this_user_month_score} –∫–º!üí™"+ "\n–Ü–Ω—Å—Ç–∞–≥—Ä–∞–º: https://www.instagram.com/southrunners2025?igsh=MW1xcGJ1eGdkbThyag==\n–Ü–Ω—Å—Ç–∞–≥—Ä–∞–º —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞: https://www.instagram.com/kalika_perehoji/",
                    reply_markup=get_keyboard1()
                )
                return ConversationHandler.END
    else:
        await update.message.reply_text(
            "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ!\n–©–æ–± –∑–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å —Ç—Ä–µ–±–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∏–ø—É:\n+ 10.0\n(–∑–∞–º—ñ—Å—Ç—å + –º–æ–∂–Ω–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ —Ç–∞–∫–æ–∂ run, –±—ñ–≥, –ü—Ä–æ–±—ñ–≥, –±–µ–≥)\n(10.0 - –≤—ñ–¥—Å—Ç–∞–Ω—å —É –∫–º, –º–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç–∏ —ñ 10 –±–µ–∑ –∫—Ä–∞–ø–∫–∏)",
            reply_markup=get_keyboard1()
        )
        return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancels and ends the conversation."""
    await update.message.reply_text(
        "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ", reply_markup=get_keyboard1()
    )

    return ConversationHandler.END


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Shows the help message when the command /help is issued."""
    await update.message.reply_text(
        "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞",
        reply_markup=get_keyboard1()
    )


def main() -> None:
    """Start the bot."""

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))

    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–†–µ–∑—É–ª—å—Ç–∞—Ç$"), my_score_command))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—è$"), runners_score_table))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–ü—Ä–æ –±–æ—Ç–∞$"), help_command))

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ó–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å$"), record_distance)],
        states={
            SCORE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_distance)],
        },
        fallbacks=[MessageHandler(filters.Regex("^–í—ñ–¥–º—ñ–Ω–∏—Ç–∏$"), cancel)],
    )

    application.add_handler(conv_handler)

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_command))

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()